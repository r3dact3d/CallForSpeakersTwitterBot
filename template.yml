AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  CFSLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CFSLambdaRole
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  CFSLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CFSLambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup*
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
      Roles:
        - !Ref CFSLambdaRole

  CFSLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Call For Speakers Twitter Bot 
      Handler: CFSTwitterBot.lambda_handler
      MemorySize: 128
      Role: !GetAtt CFSLambdaRole.Arn
      Environment:
        Variables:
          ACCESS_TOKEN: /twitter-event-source/access_token
          ACCESS_TOKEN_SECRET: /twitter-event-source/access_token_secret
          CONSUMER_KEY: /twitter-event-source/consumer_key
          CONSUME_SECRET: /twitter-event-source/consumer_secret
      Runtime: python3.6        
      Timeout: 300
      CodeUri: .

    CFSEvent:
      Type: "AWS::Events::Rule"
      Properties: 
        Description: Rule for Call For Speakers Twitter Bot
        ScheduleExpression: "rate(6 hour)"
        Name: CFSTwitterBotRule
        State: ENABLED
        Targets:
          - Arn: !GetAtt CFSLambda.Arn
            Id: CFSRule

    LambdaInvokePermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !GetAtt CFSLambda.Arn
        Action: 'lambda:InvokeFunction'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt CFSEvent.Arn

#    CFSLambdaAlarm:
#      Type: AWS::CloudWatch::Alarm
#      Properties:
#        AlarmName: !Ref CFSLambda
#        EvaluationPeriods: 1
#        Statistic: Sum
#        Threshold: 1
#        AlarmDescription: Reports if there is an error while executing lambda function
#        Period: 60
#        Namespace: AWS/Lambda
#        Dimensions:
#        - Name: FunctionName
#          Value: !Ref CFSLambda
#        ComparisonOperator: GreaterThanOrEqualToThreshold
#        MetricName: "Errors"
#        TreatMissingData: "ignore"
#        AlarmActions:
#          - !Sub "arn:aws:sns:${AWS::Region}:BossNotifications"
#        OKActions:
#          - !Sub "arn:aws:sns:${AWS::Region}:BossNotifications"
#        InsufficientDataActions:
#          - !Sub "arn:aws:sns:${AWS::Region}:BossNotifications"  